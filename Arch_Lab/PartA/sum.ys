# Execution begins at address 0
        .pos 0
        irmovq stack, %rsp 	# stack pointer
        call main          	# Execute main program
        halt               	# Terminate program
# Sample linked list
        .align 8
ele1:
        .quad 0x00a
        .quad ele2
ele2:
        .quad 0x0b0
        .quad ele3
ele3:
        .quad 0xc00
        .quad 0
main:
        irmovq ele1, %rdi    # 用 %rdi 来传递参数
        call sum_list
        ret
# long sum_list(list_ptr ls)
# ls store in %rdi
sum_list:
        irmovq $0, %rax      # 初始化%rax存储返回值
loop:  
        mrmovq 0(%rdi), %rsi
        addq %rsi, %rax      # 计算和
        mrmovq 8(%rdi), %rdi # 指向下一个元素
        andq %rdi, %rdi		 # 判断当前指针是否为空
        jne loop			 # 不为空则继续求和
loopend:
        ret
# Stack starts here and grows to lower address
        .pos 0x200           
stack:
