#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
		# Loop header
		xorq %rax,%rax			# count = 0;
	
Loop1:			
		iaddq $-6,%rdx			# len = len - 6
		# andq %rdx,%rdx			# len < 0?
		jl Others		    	# if so, goto Others:
		mrmovq (%rdi), %r10		# read val from src...
		mrmovq 8(%rdi), %r11	# read val from src...
		rmmovq %r10, (%rsi)		# ...and store it to dst
		andq %r10, %r10			# val <= 0?
		jle Npos1		    	# if so, goto Npos1:
		iaddq $1, %rax			# count++
		
Npos1:	
		rmmovq %r11, 8(%rsi)	# ...and store it to dst
		andq %r11, %r11			# val <= 0?
		jle Npos2		    	# if so, goto Npos2:
		iaddq $1, %rax			# count++

Npos2:
		mrmovq 16(%rdi), %r10	# read val from src...
		mrmovq 24(%rdi), %r11	# read val from src...
		rmmovq %r10, 16(%rsi)	# ...and store it to dst
		andq %r10, %r10			# val <= 0?
		jle Npos3		    	# if so, goto Npos3:
		iaddq $1, %rax			# count++
		
Npos3:   
		rmmovq %r11, 24(%rsi)	# ...and store it to dst
		andq %r11, %r11			# val <= 0?
		jle Npos4		   		# if so, goto Npos4:
		iaddq $1, %rax			# count++

Npos4:
		mrmovq 32(%rdi), %r10	# read val from src...
		mrmovq 40(%rdi), %r11	# read val from src...
		rmmovq %r10, 32(%rsi)	# ...and store it to dst
		andq %r10, %r10			# val <= 0?
		jle Npos5		    	# if so, goto Npos5:
		iaddq $1, %rax			# count++

Npos5:
		rmmovq %r11, 40(%rsi)	# ...and store it to dst
		iaddq $48, %rdi			# src += 32
		iaddq $48, %rsi			# dst += 32
		andq %r11, %r11			# val <= 0?
		jle Loop1		   		# if so, goto Loop1:
		iaddq $1, %rax			# count++
		jmp Loop1				# goto Loop1:

Others:
		iaddq $6, %rdx			# restore len
		# andq %rdx,%rdx			# len <= 0?
		jle Done			    # if so, goto Done
		mrmovq (%rdi), %r10		# read val from src...
		rmmovq %r10, (%rsi)		# ...and store it to dst
		andq %r10, %r10			# val <= 0?
		jle Npos6		    	# if so, goto Npos6
		iaddq $1, %rax			# count++
Npos6:
		iaddq $-1, %rdx			# len--
		# andq %rdx,%rdx			# len <= 0?
		jle Done			    # if so, goto Done	
		mrmovq 8(%rdi), %r10	# read val from src...
		rmmovq %r10, 8(%rsi)	# ...and store it to dst
		andq %r10, %r10			# val <= 0?
		jle Npos7		    	# if so, goto Npos7
		iaddq $1, %rax			# count++
Npos7:
		iaddq $-1, %rdx			# len--
		# andq %rdx,%rdx			# len <= 0?
		jle Done			    # if so, goto Done	
		mrmovq 16(%rdi), %r10	# read val from src...
		rmmovq %r10, 16(%rsi)	# ...and store it to dst
		andq %r10, %r10			# val <= 0?
		jle Npos8		    	# if so, goto Npos8
		iaddq $1, %rax			# count++
Npos8:
		iaddq $-1, %rdx			# len--
		# andq %rdx,%rdx			# len <= 0?
		jle Done			    # if so, goto Done	
		mrmovq 24(%rdi), %r10	# read val from src...
		rmmovq %r10, 24(%rsi)	# ...and store it to dst
		andq %r10, %r10			# val <= 0?
		jle Npos9		    	# if so, goto Npos9
		iaddq $1, %rax			# count++
Npos9:
		iaddq $-1, %rdx			# len--
		# andq %rdx,%rdx			# len <= 0?
		jle Done			    # if so, goto Done	
		mrmovq 32(%rdi), %r10	# read val from src...
		rmmovq %r10, 32(%rsi)	# ...and store it to dst
		andq %r10, %r10			# val <= 0?
		jle Done		    	# if so, goto Done
		iaddq $1, %rax			# count++
		
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
